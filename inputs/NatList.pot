import Bool
import Nat

append xs ys = case xs of
                  Nil -> ys
                | Cons(x,xs) -> Cons(x,append xs ys);

nrev xs = case xs of
             Nil        -> Nil
           | Cons(x,xs) -> append (nrev xs) Cons(x,Nil);

qrev xs ys = case xs of
                Nil        -> ys
              | Cons(x,xs) -> qrev xs Cons(x,ys);

length xs = case xs of
               Nil        -> Zero
             | Cons(x,xs) -> Succ(length xs);

eqNatList xs ys = case xs of
                     Nil -> (case ys of
                                Nil -> True
                              | Cons(y,ys) -> False)
                   | Cons(x,xs) -> case ys of
                                      Nil -> False
                                    | Cons(y,ys) -> and (eqNat x y) (eqNatList xs ys);

map f l =
    case l of
      Nil -> Nil
      | Cons(hd, tl) -> Cons((f hd), (map f tl));

fold f s l =
    case l of 
      Nil -> s
      | Cons(hd, tl) -> fold f (f s hd) tl
	                                      